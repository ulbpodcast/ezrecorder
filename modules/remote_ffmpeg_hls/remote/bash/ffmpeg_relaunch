#!/bin/bash -x

#include localdefs
source $(dirname $0)/localdefs

WORKING_DIR=$1
#INPUT=$2

MOVIESNB=`ls -la $WORKING_DIR | grep $COMMON_MOVIE_NAME | wc -l  | sed -e 's/^[ \t]*//'`
CURRENT_INDEX=`ls -la $WORKING_DIR/${COMMON_MOVIE_NAME}_$(($MOVIESNB - 1 ))/high/${COMMON_MOVIE_NAME}*.ts | wc -l | sed -e 's/^[ \t]*//'`

TARGET_DIR=${WORKING_DIR}/${COMMON_MOVIE_NAME}_$MOVIESNB/
HIGH_DIR=${TARGET_DIR}/high
LOW_DIR=${TARGET_DIR}/low
LIMIT_DURATION=12:00:00

mkdir -p -m777 $TARGET_DIR
mkdir -p -m777 $HIGH_DIR
mkdir -p -m777 $LOW_DIR

if [ $FFMPEG_MONO -eq 1 ]
then
    AC='-ac 1'
fi

if [ ! -z ${H264_PROFILE} ];
then
    PROFILE_STR="-profile:v ${H264_PROFILE}"
fi

if [ ! -z ${H264_PRESET} ];
then
    PRESET_STR="-preset ${H264_PRESET}"
fi


if [ "$(expr substr $(uname -s) 1 5)" = "Linux" -a "$INPUT_SOURCE" = "AV.io" ]
then
	date > ${TARGET_DIR}/modprobe.log
	/usr/bin/sudo /sbin/modprobe -v -r uvcvideo 2>&1 >> ${TARGET_DIR}/modprobe.log
	/usr/bin/sudo /sbin/modprobe -v uvcvideo 2>&1 >> ${TARGET_DIR}/modprobe.log
fi


case "$INPUT_SOURCE" in
    "DeckLink" )
        DECKLINK_INPUT="${DECKLINK_DEVICE}@${DECKLINK_FORMAT_INDEX}"
        if [ $STREAMING == 'true' ]

            then
            # streaming is enabled. We prepare low and high resolution
            $FFMPEG_PATH -f decklink -i "${DECKLINK_INPUT}" -vcodec libx264 -r 25 $PRESET_STR $PROFILE_STR -acodec aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number $CURRENT_INDEX $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vcodec libx264 -r 10 -crf 18 -acodec aac $PRESET_STR $PROFILE_STR -maxrate 256k -bufsize 480k -pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number $CURRENT_INDEX $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -update 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
        else
            # streaming is disabled. We prepare high resolution only
            $FFMPEG_PATH -f decklink -i "${DECKLINK_INPUT}" -vcodec libx264 -r 25 $PRESET_STR $PROFILE_STR -acodec aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number $CURRENT_INDEX $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -update 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
        fi ;;
    "AV.io" )
            AV_INPUT=${AVFOUNDATION_VIDEO_INTERFACE}:${AVFOUNDATION_AUDIO_INTERFACE}
            if [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]
            then
				AV_INPUT="/dev/video0"
				if [ -e $STREAMING_INFO ]
				then
					# streaming is enabled. We prepare low and high resolution
					$FFMPEG_PATH -t $LIMIT_DURATION -f video4linux2 -thread_queue_size 5120 -pixel_format yuyv422 -s 1280x720 -framerate 15 -vcodec rawvideo  \
					-i $AV_INPUT -f alsa -ac 1 -thread_queue_size 5120 -i $ALSA_INPUT -vcodec libx264 -r 15 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k \
					-bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 \
					-vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -maxrate 256k -bufsize 480k \
					-pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
					-updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID
				else
					# streaming is disabled. We prepare high resolution only
					$FFMPEG_PATH -t $LIMIT_DURATION -f video4linux2 -thread_queue_size 5120 -pixel_format yuyv422 -s 1280x720 -framerate 15 \
					-i $AV_INPUT -f alsa -ac 1 -thread_queue_size 5120 -i $ALSA_INPUT -vcodec libx264 -profile:v main -acodec libfdk_aac $AC \
					-pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
					-updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID
				fi
			else
				if [ -e $STREAMING_INFO ]
				then
					# streaming is enabled. We prepare low and high resolution
					$FFMPEG_PATH -t $LIMIT_DURATION -f avfoundation -pixel_format yuyv422 -s 1280x720 -framerate 15 -vcodec rawvideo  \
					-i $AV_INPUT -vcodec libx264 -r 15 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k \
					-bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 \
					-vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -maxrate 256k -bufsize 480k \
					-pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
					-updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID
				else
					# streaming is disabled. We prepare high resolution only
					$FFMPEG_PATH -t $LIMIT_DURATION -f avfoundation -pixel_format yuyv422 -s 1280x720 -framerate 15 \
					-i $AV_INPUT -vcodec libx264 -profile:v main -acodec libfdk_aac $AC \
					-pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
					-updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID
				fi
            fi ;;
    "avfoundation" )
        AV_INPUT=\'${AVFOUNDATION_VIDEO_INTERFACE}:${AVFOUNDATION_AUDIO_INTERFACE}\'
        if [ -e $STREAMING_INFO ]
        then
            # streaming is enabled. We prepare low and high resolution

            $FFMPEG_PATH -f avfoundation  -vcodec rawvideo -pixel_format yuyv422 -r '25' -i "$AV_INPUT" -vcodec libx264 -r 25 $PRESET_STR $PROFILE_STR -acodec aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number $CURRENT_INDEX $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vcodec libx264 -r 10 -crf 18 -acodec aac $PRESET_STR $PROFILE_STR -maxrate 256k -bufsize 480k -pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number $CURRENT_INDEX $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -update 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
        else
            # streaming is disabled. We prepare high resolution only
            $FFMPEG_PATH -f avfoundation  -vcodec rawvideo -pixel_format yuyv422 -r '25' -i "$AV_INPUT" -vcodec libx264 -r 25 $PRESET_STR $PROFILE_STR -acodec aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number $CURRENT_INDEX $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -update 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
        fi ;;
    "rtsp" )
        if [ -z $FFMPEG_RTSP_MEDIA_HIGH_URI ]
        then
            echo "ffmpeg_init: FFMPEG_RTSP_MEDIA_HIGH_URI is not defined, cannot continue" >> $TARGET_DIR/_log
            exit 1
        fi

        if [ -e $STREAMING_INFO ]
        then
            # streaming is enabled. If a low media is defined, copy it from camera stream, else re encode it ourselves
            # low probsize allow for faster stream start
            if [ -z $FFMPEG_RTSP_MEDIA_LOW_URI ]
            then
                $FFMPEG_PATH -f rtsp -rtsp_transport tcp -thread_queue_size 127 -i $FFMPEG_RTSP_MEDIA_HIGH_URI -vcodec copy -acodec libfdk_aac $AC -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -maxrate 256k -bufsize 480k -pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf scale=235:157,fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            else
                # High
                $FFMPEG_PATH -f rtsp -rtsp_transport tcp -thread_queue_size 127 -i $FFMPEG_RTSP_MEDIA_HIGH_URI -vcodec copy -acodec libfdk_aac $AC -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
                # Low, thumbnails are created from this one
                $FFMPEG_PATH -f rtsp -rtsp_transport tcp -thread_queue_size 127 -i $FFMPEG_RTSP_MEDIA_LOW_URI -vcodec copy -acodec libfdk_aac $AC -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf scale=235:157,fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID2
            fi
        else
            # streaming is disabled. We prepare high resolution only
            $FFMPEG_PATH -f rtsp -rtsp_transport tcp -thread_queue_size 127 -i $FFMPEG_RTSP_MEDIA_HIGH_URI -vcodec copy -acodec libfdk_aac $AC -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf scale=235:157,fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
        fi
        ;;
    *)
        #no valid input source specified
        exit 1
        ;;
        # -f decklink = force BMD source
        # -i = input source
        # -vcodec = video codec (H264)
        # -r = framerate
        # -crf = encoding quality (higher = lower quality / best = 0)
        # -profile:v = video profile (baseline | main | high)
        # -maxrate = max bitrate
        # -bufsize = buffer size
        # -pix_fmt = pixel format
        # -force_key_frames = regular expression for setting keyframe every 3sec
        # -flags ?
        # -global_header ?
        # -hls_time = segment duration in seconds for HLS (related to keyframe)
        # -hls_list_size = limitation for HLS segments
        # -hls_wrap = number of segments before overwritting
        # -start_number = first segment starts at ...
esac
