#!/bin/bash -x

# This script must be sudo authorized for _www to run as podclient

#include localdefs (generated by lib_capture at module init)
source $(dirname $0)/../etc/localdefs

ASSET=$1
INPUT=$2
#directory where to save video
WORKING_DIR=$3
CALLS=$4

MAXCALLS=3 	# attemps starting the process $MAXCALLS times before considering it failed
EXISTS_VIDEO=0 		# 1 if ${COMMON_MOVIE_NAME}* exists on EZrecorder
#make sure records don't run ad vitam aeternam in cas of problem
LIMIT_DURATION=12:00:00

STATUS_FILE=$EZCASTDIR/var/status
echo -n "init" > $STATUS_FILE

#first clean up eventual movie remaining
PREVIOUS_RECORDS=$WORKING_DIR/${COMMON_MOVIE_NAME}*
if [ -d "$PREVIOUS_RECORDS" ]; then
   SDAT=`date +"%Y_%m_%d_%Hh%M"`
   TRASH_DIR=${WORKING_DIR}/trash_${SDAT}/
   mkdir $TRASH_DIR
   mv $PREVIOUS_RECORDS $TRASH_DIR/
fi
if [ -f $$THUMBNAIL_PATH ]; then
    rm $THUMBNAIL_PATH
fi

#make sure last ffmpeg is dead
kill -9 `cat $FFMPEG_PID`
kill -9 `cat $FFMPEG_PID2`

TARGET_DIR=${WORKING_DIR}/${COMMON_MOVIE_NAME}_0/
HIGH_DIR=${TARGET_DIR}/high
LOW_DIR=${TARGET_DIR}/low

mkdir -p -m777 $TARGET_DIR
mkdir -p -m777 $HIGH_DIR
mkdir -p -m777 $LOW_DIR


if [ "$(expr substr $(uname -s) 1 5)" = "Linux" -a "$INPUT" = "AV.io" ]
then
	date > ${TARGET_DIR}/modprobe.log
	/usr/bin/sudo /sbin/modprobe -v -r uvcvideo 2>&1 >> ${TARGET_DIR}/modprobe.log
	/usr/bin/sudo /sbin/modprobe -v uvcvideo 2>&1 >> ${TARGET_DIR}/modprobe.log
fi



# loop while delay hasn't expired and cam file doesn't exist
while [ $CALLS -le $MAXCALLS -a \( $EXISTS_VIDEO -eq 0 \) ]
do
    case "$INPUT" in
        "DeckLink" )
          DECKLINK_INPUT="${DECKLINK_DEVICE}@${DECKLINK_FORMAT_INDEX}"
          if [ -e $STREAMING_INFO ]
            then 
                # streaming is enabled. We prepare low and high resolution
                nice $FFMPEG_PATH -t $LIMIT_DURATION -f decklink -i "${DECKLINK_INPUT}" -vcodec libx264 -r 25 -crf 28 -profile:v main -threads 2 -acodec libfdk_aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -threads 3 -maxrate 256k -bufsize 480k -pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            else 
                # streaming is disabled. We prepare high resolution only
                nice $FFMPEG_PATH -t $LIMIT_DURATION -f decklink -i "${DECKLINK_INPUT}" -vcodec libx264 -r 25 -crf 28 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            fi 

        ;;
        #kept for compat and should be removed as soon as possible
        "UltraStudioMiniRecorder" )
            if [ -e $STREAMING_INFO ]
            then 
                # streaming is enabled. We prepare low and high resolution
                nice $FFMPEG_PATH -t $LIMIT_DURATION -f decklink -i 'UltraStudio Mini Recorder@14' -vcodec libx264 -r 25 -crf 28 -profile:v main -threads 2 -acodec libfdk_aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -threads 3 -maxrate 256k -bufsize 480k -pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            else 
                # streaming is disabled. We prepare high resolution only
                nice $FFMPEG_PATH -t $LIMIT_DURATION -f decklink -i 'UltraStudio Mini Recorder@14' -vcodec libx264 -r 25 -crf 28 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            fi 
        ;;
        #kept for compat and should be removed as soon as possible
        "IntensityShuttle" )
            if [ -e $STREAMING_INFO ]
            then 
                # streaming is enabled. We prepare low and high resolution
                $FFMPEG_PATH -t $LIMIT_DURATION -f decklink -i 'Intensity Shuttle@3' -vcodec libx264 -r 25 -crf 18 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -maxrate 256k -bufsize 480k -pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            else 
                # streaming is disabled. We prepare high resolution only
                $FFMPEG_PATH -t $LIMIT_DURATION -f decklink -i 'Intensity Shuttle@3' -vcodec libx264 -r 25 -crf 18 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            fi 
        ;;  
        #kept for compat and should be removed as soon as possible
        "IntensityShuttleThunderbolt" )
            if [ -e $STREAMING_INFO ]
            then 
                # streaming is enabled. We prepare low and high resolution
                $FFMPEG_PATH -t $LIMIT_DURATION -f decklink -i 'Intensity Shuttle Thunderbolt@3' -vcodec libx264 -r 25 -crf 18 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -maxrate 256k -bufsize 480k -pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            else 
                # streaming is disabled. We prepare high resolution only
                $FFMPEG_PATH -t $LIMIT_DURATION -f decklink -i 'Intensity Shuttle Thunderbolt@3' -vcodec libx264 -r 25 -crf 18 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            fi 
        ;;  
       "avfoundation" )
            AV_INPUT=${AVFOUNDATION_VIDEO_INTERFACE}:${AVFOUNDATION_AUDIO_INTERFACE}
            if [ -e $STREAMING_INFO ]
            then
                # streaming is enabled. We prepare low and high resolution
                $FFMPEG_PATH -t $LIMIT_DURATION -f avfoundation -vcodec rawvideo -pixel_format yuyv422 -r '25' \
                -i $AV_INPUT -vcodec libx264 -r 25 -crf 18 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k \
                -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
                -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 \
                -vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -maxrate 256k -bufsize 480k \
                -pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
                -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
                -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID

                # streaming is disabled. We prepare high resolution only
                $FFMPEG_PATH -t $LIMIT_DURATION -f avfoundation -vcodec rawvideo -pixel_format yuyv422 -r '25' \
                -i $AV_INPUT -vcodec libx264 -r 25 -crf 18 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k \
                -bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
                -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
                -updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID

            fi
        ;;
        "AV.io" )
            AV_INPUT=${AVFOUNDATION_VIDEO_INTERFACE}:${AVFOUNDATION_AUDIO_INTERFACE}

            if [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]
            then
				AV_INPUT="/dev/video0"
				if [ -e $STREAMING_INFO ]
				then
					# streaming is enabled. We prepare low and high resolution
					$FFMPEG_PATH -t $LIMIT_DURATION -f video4linux2 -thread_queue_size 5120 -pixel_format yuyv422 -s 1280x720 \
					-framerate 15 -vcodec rawvideo -i $AV_INPUT -f alsa -ac 1 -thread_queue_size 5120 \
					-i $ALSA_INPUT -vcodec libx264 -r 15 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k \
					-bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 \
					-vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -maxrate 256k -bufsize 480k \
					-pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
					-updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID
				else
					# streaming is disabled. We prepare high resolution only
					$FFMPEG_PATH -t $LIMIT_DURATION -f video4linux2 -thread_queue_size 5120 -pixel_format yuyv422 -s 1280x720 -framerate 15 \
					-i $AV_INPUT -f alsa -ac 1 -thread_queue_size 5120 -i $ALSA_INPUT -vcodec libx264 -profile:v main -acodec libfdk_aac $AC \
					-pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
					-updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID
				fi
			else
				if [ -e $STREAMING_INFO ]
				then
					# streaming is enabled. We prepare low and high resolution
					$FFMPEG_PATH -t $LIMIT_DURATION -f avfoundation -pixel_format yuyv422 -s 1280x720 -framerate 15 -vcodec rawvideo  \
					-i $AV_INPUT -vcodec libx264 -r 15 -profile:v main -acodec libfdk_aac $AC -maxrate 1000k \
					-bufsize 1835k -pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 \
					-vcodec libx264 -r 10 -crf 18 -acodec libfdk_aac -profile:v baseline -maxrate 256k -bufsize 480k \
					-pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
					-updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID
				else
					# streaming is disabled. We prepare high resolution only
					$FFMPEG_PATH -t $LIMIT_DURATION -f avfoundation -pixel_format yuyv422 -s 1280x720 -framerate 15 \
					-i $AV_INPUT -vcodec libx264 -profile:v main -acodec libfdk_aac $AC \
					-pix_fmt yuv420p -force_key_frames "expr:gte(t,n_forced*3)" -flags -global_header \
					-hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf fps=1 -y \
					-updatefirst 1 $THUMBNAIL_PATH </dev/null >/dev/null 2> $TARGET_DIR/ffmpeg_${CALLS}.log & echo $! > $FFMPEG_PID
				fi
            fi ;;
        "rtsp" )
            if [ -z $FFMPEG_RTSP_MEDIA_HIGH_URI ]
            then
                echo "ffmpeg_init: FFMPEG_RTSP_MEDIA_HIGH_URI is not defined, cannot continue" >> $TARGET_DIR/_log
                exit 1
            fi

            if [ -e $STREAMING_INFO ]
            then
                # streaming is enabled. If a low media is defined, copy it from camera stream, else re encode it ourselves
                if [ -z $FFMPEG_RTSP_MEDIA_LOW_URI ]
                then
                    $FFMPEG_PATH -t $LIMIT_DURATION -f rtsp -rtsp_transport tcp -thread_queue_size 127 \
                        -i $FFMPEG_RTSP_MEDIA_HIGH_URI -vcodec copy -acodec  aac $AC  -hls_time 3 \
                        -hls_list_size 0 -hls_wrap 0 -start_number 1 \
                        $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vcodec libx264 \
                        -r 10 -crf 18 -acodec aac -profile:v baseline -maxrate 256k -bufsize 480k \
                        -pix_fmt yuv420p -b:v 128k -b:a 96k $AC -force_key_frames "expr:gte(t,n_forced*3)" \
                        -flags -global_header -hls_time 3 -hls_list_size 0 -hls_wrap 0 -start_number 1 \
                        $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 -vf scale=235:157,fps=1 \
                        -y -update 1 $THUMBNAIL_PATH \
                        >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
                else
                    # High
                    $FFMPEG_PATH -t $LIMIT_DURATION -f rtsp -rtsp_transport tcp -thread_queue_size 127 \
                    -i $FFMPEG_RTSP_MEDIA_HIGH_URI -map 0:0 -map 0:1  -vcodec copy -acodec aac $AC -hls_time 3 \
                    -hls_list_size 0 -hls_wrap 0 -start_number 1 $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 \
                    >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID

                    sleep 1
         
                    # Low, thumbnails are created from this one
                    $FFMPEG_PATH -t $LIMIT_DURATION -f rtsp -rtsp_transport tcp -thread_queue_size 127 \
                    -i $FFMPEG_RTSP_MEDIA_LOW_URI -map 0:0 -map 0:1  -vcodec copy -acodec aac $AC -hls_time 3 \
                    -hls_list_size 0 -hls_wrap 0 -start_number 1 $LOW_DIR/$COMMON_MOVIE_NAME.m3u8 \
                    -vf scale=235:157,fps=1 -y -update 1 $THUMBNAIL_PATH \
                    >/dev/null 2> $TARGET_DIR/ffmpeg_low.log & echo $! > $FFMPEG_PID2
                fi
            else 

                # streaming is disabled. We prepare high resolution only
                $FFMPEG_PATH -f rtsp -rtsp_transport tcp -thread_queue_size 127 \
                -i $FFMPEG_RTSP_MEDIA_HIGH_URI -vcodec copy -acodec aac $AC -hls_time 3 \
                -hls_list_size 0 -hls_wrap 0 -start_number 1 \
                $HIGH_DIR/$COMMON_MOVIE_NAME.m3u8 -vf scale=235:157,fps=1 \
                -y -update 1 $THUMBNAIL_PATH \
                >/dev/null 2> $TARGET_DIR/ffmpeg.log & echo $! > $FFMPEG_PID
            fi
        ;;
        *)
            #no valid input source specified
            exit 1
            ;;

            # -f decklink = force BMD source
            # -i = input source
            # -vcodec = video codec (H264)
            # -r = framerate
            # -crf = encoding quality (higher = lower quality / best = 0)
            # -profile:v = video profile (baseline | main | high)
            # -maxrate = max bitrate
            # -bufsize = buffer size
            # -pix_fmt = pixel format
            # -force_key_frames = regular expression for setting keyframe every 3sec
            # -flags ?
            # -global_header ?
            # -hls_time = segment duration in seconds for HLS (related to keyframe)
            # -hls_list_size = limitation for HLS segments
            # -hls_wrap = number of segments before overwritting
            # -start_number = first segment starts at ...
    esac


    SDAT=`date +"%s"` 	#start date
    WAITING_DELAY=20 	#if the file doesn't exist after 20s, we consider FFMPEG has crashed

    # loop while delay hasn't expired and cam file doesn't exist
    while [ $(( `date +"%s"`- $SDAT )) -le $WAITING_DELAY -a \( $EXISTS_VIDEO -eq 0 \) ]
    do
        # if video didn't exist yet, checks if it exists now
        [ $EXISTS_VIDEO -eq 0 ] && test -e $HIGH_DIR/${COMMON_MOVIE_NAME}1.ts && EXISTS_VIDEO=1;
        
        if [ -e $STREAMING_INFO ] && [ $EXISTS_VIDEO -eq 1 ]
        then 
            EXISTS_VIDEO=0;
            [ $EXISTS_VIDEO -eq 0 ] && test -e $LOW_DIR/${COMMON_MOVIE_NAME}1.ts && EXISTS_VIDEO=1;
        fi
        
        # if    if [ $EXISTS_VIDEO -eq 0 ]cam doesn't exist yet, wait 

        if [ $EXISTS_VIDEO -eq 0 ]
        then
            sleep 1
        else
          #first .ts file found. Lets see if we don't see those lethal DTS errors is logfile
          grep 'non monotonous DTS' $HIGH_DIR/../ffmpeg.log
          if [ $? -eq 0 ] 
          then
            # we have a DTS problem, so we need to restart ffmpeg
            EXISTS_VIDEO=0
            kill -HUP $FFMPEG_PID 
            
            rm $TARGET_DIR/ffmpeg.log
            rm  $HIGH_DIR/*.m3u8
            rm  $HIGH_DIR/*.ts
            rm  $LOW_DIR/*.m3u8
            rm  $LOW_DIR/*.ts
          fi
        fi
    done

    # add entry in log file
    [ $CALLS -eq 1 ] && echo "********************************************" >> $TARGET_DIR/_check_log
    [ $CALLS -gt 1 ] && echo "--------------------------------------------" >> $TARGET_DIR/_check_log
    echo `date +"%d/%m/%y - %Hh%Mm%Ss"` : Attempt $CALLS >> $TARGET_DIR/_check_log
    echo "--------------------------------------------" >> $TARGET_DIR/_check_log
    if [ $EXISTS_VIDEO -eq 1 ]; then
        echo "CAM (EZrecorder)   : Success" >> $TARGET_DIR/_check_log;
    else
        echo "CAM (EZrecorder)   : Failure" >> $TARGET_DIR/_check_log;
        kill -9 `cat $FFMPEG_PID`
        kill -9 `cat $FFMPEG_PID2`
        rm $LOW_DIR/${COMMON_MOVIE_NAME}*.ts
        rm $HIGH_DIR/${COMMON_MOVIE_NAME}*.ts

    fi;

    #increments CALLS
    CALLS=$(( $CALLS + 1 ))

done

# the file has not been found
if [ $EXISTS_VIDEO -eq 0 ]
then
    echo "FAILURE FFMPEG"
    echo "FFMPEG Launch Failure in $CLASSROOM" | mail -s "FFMPEG Failure $CLASSROOM" $MAIL_TO
    echo -n "launch_failure" > $STATUS_FILE
    exit 1
else # currently recording
    #saves current date as recording init
    echo init:`date +%s`:`date +"%Y_%m_%d_%Hh%M"` > ${WORKING_DIR}/_cut_list.txt

    #start monitoring 

    echo "$PHP_PATH $EZCASTDIR/cli_monitoring.php $ASSET > $WORKING_DIR/monit.txt" | at now

    echo -n "open" > $STATUS_FILE
    exit 0
fi
